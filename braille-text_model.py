# -*- coding: utf-8 -*-
"""Braille-Text_Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hrs6_2jKC_YAIXbyj63qiBM6cN4BrS2x
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np
import pandas as pd
from shutil import copyfile

os.mkdir('./images/')
alpha = 'a'
for i in range(0, 26): 
    os.mkdir('./images/' + alpha)
    alpha = chr(ord(alpha) + 1)

rootdir = '/content/drive/MyDrive/Personal/Main Project/Braille Dataset/'
for file in os.listdir(rootdir):
    letter = file[0]
    copyfile(rootdir+file, './images/' + letter + '/' + file)

from keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(rotation_range=20,
                             shear_range=10,
                             validation_split=0.2)

train_generator = datagen.flow_from_directory('./images/',
                                              target_size=(28,28),
                                              subset='training')

val_generator = datagen.flow_from_directory('./images/',
                                            target_size=(28,28),
                                            subset='validation')

from keras import backend as K
from keras import layers as L
from keras.models import Model,load_model
from keras.regularizers import l2
from keras.callbacks import ModelCheckpoint,ReduceLROnPlateau,EarlyStopping

K.clear_session()

model_ckpt = ModelCheckpoint('BrailleNet.h5',save_best_only=True)
reduce_lr = ReduceLROnPlateau(patience=8,verbose=0)
early_stop = EarlyStopping(patience=15,verbose=1)

entry = L.Input(shape=(28,28,3))
x = L.SeparableConv2D(64,(3,3),activation='relu')(entry)
x = L.MaxPooling2D((2,2))(x)
x = L.SeparableConv2D(128,(3,3),activation='relu')(x)
x = L.MaxPooling2D((2,2))(x)
x = L.SeparableConv2D(256,(2,2),activation='relu')(x)
x = L.GlobalMaxPooling2D()(x)
x = L.Dense(256)(x)
x = L.LeakyReLU()(x)
x = L.Dense(64,kernel_regularizer=l2(2e-4))(x)
x = L.LeakyReLU()(x)
x = L.Dense(26,activation='softmax')(x)

model = Model(entry,x)
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

history = model.fit_generator(train_generator,
                              validation_data=val_generator,
                              epochs=666,
                              callbacks=[model_ckpt,reduce_lr,early_stop],
                              verbose=1)

model.summary()

model = load_model('BrailleNet.h5')
acc = model.evaluate_generator(val_generator)[1]
print('model accuracy: {}'.format(round(acc,4)))

import matplotlib.pyplot as plt
plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(history.history['accuracy'], label='train acc')
plt.plot(history.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

from tensorflow.keras.preprocessing import image
img=image.load_img('/content/drive/MyDrive/Personal/Main Project/Braille Dataset/j1.JPG3whs.jpg')

plt.imshow(img)

x=image.img_to_array(img)
print(x)

print(x.shape)

x=np.expand_dims(x,axis=0)
model.predict(x)

a=np.argmax(model.predict(x), axis=1)

if a==0:
  print('a')
elif a==1:
  print('b')
elif a==2:
  print('c')
elif a==3:
  print('d')
elif a==4:
  print('e')
elif a==5:
  print('f')
elif a==6:
  print('g')
elif a==7:
  print('h')
elif a==8:
  print('i')
elif a==9:
  print('j')
elif a==10:
  print('k')
elif a==11:
  print('l')
elif a==12:
  print('m')
elif a==13:
  print('n')
elif a==14:
  print('o')
elif a==15:
  print('p')
elif a==16:
  print('q')
elif a==17:
  print('r')
elif a==18:
  print('s')
elif a==19:
  print('t')
elif a==20:
  print('u')
elif a==21:
  print('v')
elif a==22:
  print('w')
elif a==23:
  print('x')
elif a==24:
  print('y')
elif a==25:
  print('z')